{"version":3,"sources":["Bar.js","App.js","serviceWorker.js","index.js"],"names":["QrScanner","WORKER_PATH","QrScannerWorkerPath","Test","props","setResult","label","result","textContent","camQrResultTimestamp","Date","toString","style","color","clearTimeout","highlightTimeout","setTimeout","state","videoRef","React","createRef","selectRef","camHasCameraRef","hasCamera","then","camref","console","log","start","id","ref","this","muted","playsinline","refs","Component","App","className","Bar","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4SAGAA,IAAUC,YAAcC,I,IA4DTC,E,YAzDb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAqBRC,UAAY,SAACC,EAAOC,GAClBD,EAAME,YAAcD,EACpB,EAAKE,qBAAqBD,aAAc,IAAIE,MAAOC,WACnDL,EAAMM,MAAMC,MAAQ,OACpBC,aAAaR,EAAMS,kBACnBT,EAAMS,iBAAmBC,YAAW,kBAAMV,EAAMM,MAAMC,MAAQ,YAAW,MAzBzE,EAAKI,MAAQ,CACXV,OAAQ,aAEV,EAAKW,SAAWC,IAAMC,YACtB,EAAKC,UAAYF,IAAMC,YACvB,EAAKE,gBAAkBH,IAAMC,YAC7B,EAAKX,qBAAuBU,IAAMC,YARlB,E,iFAYG,IAAD,OAElBpB,IAAUuB,YAAYC,MAAK,SAAAD,GACP,IAAIvB,IAAU,EAAKyB,QAAQ,SAAAlB,GAAM,OAAImB,QAAQC,IAAI,mBAAoBpB,MAC7EqB,a,+BAcL,IAAD,OAEN,OACE,6BACE,6BACE,iDACA,kDACA,0BAAMC,GAAG,iBAAiBC,IAAKC,KAAKT,kBACpC,6BACA,2BAAOU,OAAK,EAACC,aAAW,EAACJ,GAAG,WAAWC,IAAK,SAAAI,GAAI,OAAG,EAAKT,OAAOS,MAGjE,6BACE,8BAEF,iDACA,0BAAML,GAAG,iBAAT,QACA,6BACA,iDACA,0BAAMA,GAAG,0BAA0BC,IAAKC,KAAKtB,uBAC7C,kC,GAnDW0B,aCqBJC,MAtBf,WACE,OACE,yBAAKC,UAAU,OAeb,kBAACC,EAAD,QCTAC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTtB,MAAK,SAAA2B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBpC,QACf+B,UAAUC,cAAcO,YAI1B9B,QAAQC,IACN,iHAKEoB,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBzB,QAAQC,IAAI,sCAGRoB,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BQ,OAAM,SAAAC,GACLlC,QAAQkC,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBjB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,GAAwBzB,OAAOC,SAASyB,MACpDC,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMoB,GAAN,sBAEP3B,IAgEV,SAAiCO,EAAOC,GAEtCuB,MAAMxB,EAAO,CACXyB,QAAS,CAAE,iBAAkB,YAE5B/C,MAAK,SAAAgD,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAMrD,MAAK,SAAA2B,GACjCA,EAAa2B,aAAatD,MAAK,WAC7BiB,OAAOC,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1BY,OAAM,WACLjC,QAAQC,IACN,oEAvFAqD,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAMrD,MAAK,WACjCE,QAAQC,IACN,iHAMJkB,EAAgBC,EAAOC,OCvC/BE,K","file":"static/js/main.a0f6f7d7.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport QrScanner from 'qr-scanner'; \nimport QrScannerWorkerPath from \"../node_modules/qr-scanner/qr-scanner-worker.min.js\";\nQrScanner.WORKER_PATH = QrScannerWorkerPath;\n\nclass Test extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      result: 'No result',\n    }\n    this.videoRef = React.createRef();\n    this.selectRef = React.createRef();\n    this.camHasCameraRef = React.createRef();\n    this.camQrResultTimestamp = React.createRef();\n    // this.handleScan = this.handleScan.bind(this)\n  }\n\n  componentDidMount() {\n    \n    QrScanner.hasCamera().then(hasCamera => {\n      const qrScanner = new QrScanner(this.camref, result => console.log('decoded qr code:', result));\n      qrScanner.start();\n    });\n    \n    \n  }\n\n  setResult = (label, result) => {\n    label.textContent = result;\n    this.camQrResultTimestamp.textContent = new Date().toString();\n    label.style.color = 'teal';\n    clearTimeout(label.highlightTimeout);\n    label.highlightTimeout = setTimeout(() => label.style.color = 'inherit', 100);\n  }\n  \n  render(){\n \n    return(\n      <div>\n        <div>\n          <h1>Scan from WebCam:</h1>\n          <b>Device has camera: </b>\n          <span id=\"cam-has-camera\" ref={this.camHasCameraRef}></span>\n          <br/>\n          <video muted playsinline id=\"qr-video\" ref={refs=> this.camref=refs}></video>\n        </div>\n\n        <div>\n          <br/>\n      </div>\n        <b>Detected QR code: </b>\n        <span id=\"cam-qr-result\">None</span>\n        <br/>\n        <b>Last detected at: </b>\n        <span id=\"cam-qr-result-timestamp\" ref={this.camQrResultTimestamp}></span>\n        <hr/>\n\n      </div>\n    )\n  }\n}\n\nexport default Test;","import React from 'react';\nimport './App.css';\nimport Bar from \"./Bar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      <Bar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}